import time
import json
from typing import Dict, Any, Optional
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import logging

# Logging ayarlarƒ±
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class IcisleriBot:
    """ƒ∞√ßi≈üleri Bakanlƒ±ƒüƒ± sitesinden kimlik bilgilerini √ßeken bot"""

    def __init__(self, headless=True):
        self.driver = None
        self.is_logged_in = False
        self.headless = headless
        self.wait_timeout = 10

    def setup_driver(self):
        """Chrome driver'ƒ± hazƒ±rla"""
        try:
            logger.info("üîß ChromeDriver ba≈ülatƒ±lƒ±yor...")
            chrome_options = Options()
            if self.headless:
                chrome_options.add_argument("--headless")
                logger.info("üåê Headless mod aktif")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")

            # √ñnce sistem ChromeDriver'ƒ±nƒ± dene
            try:
                logger.info("üîç Sistem ChromeDriver deneniyor...")
                self.driver = webdriver.Chrome(options=chrome_options)
                logger.info("‚úÖ Sistem ChromeDriver ba≈üarƒ±yla ba≈ülatƒ±ldƒ±")
            except:
                # Sistem ChromeDriver yoksa WebDriver Manager kullan
                logger.info("üì• WebDriver Manager ile ChromeDriver indiriliyor...")
                service = Service(ChromeDriverManager().install())
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
                logger.info("‚úÖ WebDriver Manager ile ChromeDriver ba≈ülatƒ±ldƒ±")

            self.driver.implicitly_wait(5)
            logger.info("üöÄ ChromeDriver hazƒ±r")
            return True
        except Exception as e:
            logger.error(f"‚ùå Driver setup hatasƒ±: {e}")
            return False

    def login_to_icisleri(self, username: str, password: str) -> bool:
        """ƒ∞√ßi≈üleri Bakanlƒ±ƒüƒ± sitesine giri≈ü yap"""
        try:
            if not self.driver:
                if not self.setup_driver():
                    return False

            logger.info("üåê ƒ∞√ßi≈üleri Bakanlƒ±ƒüƒ± sitesine baƒülanƒ±lƒ±yor...")
            # Giri≈ü sayfasƒ±na git
            self.driver.get("https://asilah.icisleri.gov.ct.tr/Security/Login/")
            logger.info("üìÑ Giri≈ü sayfasƒ± y√ºklendi")

            logger.info("üë§ Kullanƒ±cƒ± adƒ± giriliyor...")
            # Username input
            username_input = WebDriverWait(self.driver, self.wait_timeout).until(
                EC.presence_of_element_located((By.XPATH, "/html/body/div[2]/div/div/div/div/div[2]/form/div[1]/input"))
            )
            username_input.clear()
            username_input.send_keys(username)
            logger.info("‚úÖ Kullanƒ±cƒ± adƒ± girildi")

            logger.info("üîí ≈ûifre giriliyor...")
            # Password input
            password_input = self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div/div/div/div[2]/form/div[2]/input")
            password_input.clear()
            password_input.send_keys(password)
            logger.info("‚úÖ ≈ûifre girildi")

            logger.info("üö™ Giri≈ü yapƒ±lƒ±yor...")
            # Login button
            login_button = self.driver.find_element(By.XPATH, "/html/body/div[2]/div/div/div/div/div[2]/form/div[4]/button[1]")
            login_button.click()
            logger.info("‚è≥ Giri≈ü i≈ülemi bekleniyor...")

            # Giri≈ü ba≈üarƒ±lƒ± mƒ± kontrol et
            time.sleep(3)
            if "Login" not in self.driver.current_url:
                self.is_logged_in = True
                logger.info("‚úÖ ƒ∞√ßi≈üleri Bakanlƒ±ƒüƒ± sistemine ba≈üarƒ±yla giri≈ü yapƒ±ldƒ±")
                return True
            else:
                logger.error("‚ùå Giri≈ü ba≈üarƒ±sƒ±z - Login sayfasƒ±nda kaldƒ±")
                return False

        except Exception as e:
            logger.error(f"‚ùå ƒ∞√ßi≈üleri giri≈ü hatasƒ±: {e}")
            return False

    def get_member_info(self, identity_number: str) -> Dict[str, Any]:
        """Kimlik numarasƒ±ndan √ºye bilgilerini √ßek"""
        try:
            if not self.is_logged_in:
                return {"error": "Giri≈ü yapƒ±lmamƒ±≈ü"}

            logger.info(f"üîç Kimlik numarasƒ± {identity_number} i√ßin bilgiler aranƒ±yor...")
            # √úye ekleme sayfasƒ±na git
            url = f"https://asilah.icisleri.gov.ct.tr/AvcilikAticilikDernekUye/Yeni?kimlikNumarasi={identity_number}"
            self.driver.get(url)
            logger.info("üìÑ √úye bilgi sayfasƒ± y√ºklendi")

            # Sayfanƒ±n y√ºklenmesini bekle
            logger.info("‚è≥ Sayfa y√ºklenmesi bekleniyor...")
            time.sleep(3)

            # Bilgileri √ßek
            member_info = {}
            logger.info("üìã Bilgiler √ßekiliyor...")

            def get_field_info(xpath, field_name):
                """Alan bilgilerini ve readonly durumunu √ßek"""
                try:
                    element = self.driver.find_element(By.XPATH, xpath)
                    value = element.get_attribute('value') or ""
                    readonly = element.get_attribute('readonly') is not None or element.get_attribute('disabled') is not None
                    logger.info(f"‚úÖ {field_name}: {value} (Readonly: {readonly})")
                    return value, readonly
                except:
                    logger.warning(f"‚ö†Ô∏è {field_name} bilgisi √ßekilemedi")
                    return "", False

            def get_select_info(xpath, field_name):
                """Select elementi bilgilerini √ßek"""
                try:
                    select_element = self.driver.find_element(By.XPATH, xpath)
                    selected_value = select_element.get_attribute('value') or ""
                    readonly = select_element.get_attribute('disabled') is not None

                    # T√ºm option'larƒ± al
                    options = []
                    option_elements = select_element.find_elements(By.TAG_NAME, "option")

                    for option in option_elements:
                        option_value = option.get_attribute('value') or ""
                        option_text = option.text.strip()
                        option_id = option.get_attribute('data-select2-id') or ""

                        options.append({
                            'value': option_value,
                            'text': option_text,
                            'id': option_id
                        })

                    logger.info(f"‚úÖ {field_name}: {selected_value} (Readonly: {readonly}, {len(options)} se√ßenek)")
                    return selected_value, readonly, options
                except:
                    logger.warning(f"‚ö†Ô∏è {field_name} bilgisi √ßekilemedi")
                    return "", False, []

            # T√ºm alanlarƒ± √ßek
            fields = [
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[1]/div[5]/div[1]/input", "firstName", "ƒ∞sim"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[1]/div[5]/div[2]/input", "lastName", "Soyisim"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[1]/div[6]/div[1]/input", "middleName", "ƒ∞kinci isim"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[1]/div[6]/div[2]/input", "birthSurname", "Doƒüum soyismi"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[1]/div[7]/div/input", "gender", "Cinsiyet"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[1]/div[8]/div[1]/input", "birthPlace", "Doƒüum yeri"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[1]/div[9]/div[1]/input", "motherName", "Anne adƒ±"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[1]/div[9]/div[2]/input", "fatherName", "Baba adƒ±"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[1]/div[8]/div[2]/input", "birthDate", "Doƒüum tarihi"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[3]/div[3]/div/div/input", "phoneNumber", "Telefon"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[3]/div[4]/div[1]/div/input", "gsmCountryCode", "GSM Alan kodu"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[3]/div[4]/div[2]/input", "gsmOperatorCode", "GSM Operat√∂r kodu"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[3]/div[4]/div[3]/input", "gsmNumber", "GSM Numarasƒ±"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[2]/div[3]/div[2]/input", "neighborhood", "Mahalle"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[2]/div[4]/div[1]/input", "street", "Cadde"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[2]/div[4]/div[2]/input", "buildingNameOrNumber", "Bina"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[2]/div[5]/div[1]/input", "doorNumber", "Dƒ±≈ü kapƒ± no"),
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[2]/div[5]/div[2]/input", "apartmentNumber", "ƒ∞√ß kapƒ± no")
            ]

            # Select alanlarƒ±
            select_fields = [
                ("/html/body/div[3]/div/div[2]/div[2]/div[3]/div/div/div/div[2]/div/form/div[1]/div/div[2]/div[3]/div[1]/select", "district", "ƒ∞l√ße")
            ]

            for xpath, field_name, display_name in fields:
                logger.info(f"üë§ {display_name} bilgisi √ßekiliyor...")
                value, readonly = get_field_info(xpath, display_name)
                member_info[field_name] = value
                member_info[f'{field_name}_readonly'] = readonly

            # Select alanlarƒ±nƒ± √ßek
            for xpath, field_name, display_name in select_fields:
                logger.info(f"üèõÔ∏è {display_name} bilgisi √ßekiliyor...")
                selected_value, readonly, options = get_select_info(xpath, display_name)
                member_info[field_name] = selected_value
                member_info[f'{field_name}_readonly'] = readonly
                member_info[f'{field_name}_options'] = options

            # Kimlik numarasƒ±nƒ± ekle
            member_info['identityNumber'] = identity_number
            member_info['nationality'] = "KT"

            logger.info("üéâ T√ºm bilgiler ba≈üarƒ±yla √ßekildi!")
            return member_info

        except Exception as e:
            logger.error(f"‚ùå Bilgi √ßekme hatasƒ±: {e}")
            return {"error": f"Bilgi √ßekme hatasƒ±: {str(e)}"}

    def close(self):
        """Driver'ƒ± kapat"""
        try:
            if self.driver:
                logger.info("üîí ChromeDriver kapatƒ±lƒ±yor...")
                self.driver.quit()
                logger.info("‚úÖ ChromeDriver kapatƒ±ldƒ±")
        except:
            pass

def fetch_member_info_from_icisleri(identity_number: str) -> Dict[str, Any]:
    """ƒ∞√ßi≈üleri Bakanlƒ±ƒüƒ± sitesinden √ºye bilgilerini √ßek"""
    logger.info(f"üöÄ Kimlik numarasƒ± {identity_number} i√ßin bilgi √ßekme i≈ülemi ba≈ülatƒ±lƒ±yor...")
    bot = IcisleriBot(headless=True)

    try:
        # Giri≈ü yap
        logger.info("üîê ƒ∞√ßi≈üleri Bakanlƒ±ƒüƒ± sistemine giri≈ü yapƒ±lƒ±yor...")
        if not bot.login_to_icisleri("gizay.kilicoglu", "1234avfed"):
            logger.error("‚ùå Giri≈ü ba≈üarƒ±sƒ±z")
            return {"error": "ƒ∞√ßi≈üleri Bakanlƒ±ƒüƒ± sitesine giri≈ü ba≈üarƒ±sƒ±z"}

        # Bilgileri √ßek
        logger.info("üìã √úye bilgileri √ßekiliyor...")
        member_info = bot.get_member_info(identity_number)

        logger.info("‚úÖ Bilgi √ßekme i≈ülemi tamamlandƒ±")
        return member_info

    except Exception as e:
        logger.error(f"‚ùå ƒ∞≈ülem hatasƒ±: {str(e)}")
        return {"error": f"ƒ∞≈ülem hatasƒ±: {str(e)}"}

    finally:
        bot.close()
